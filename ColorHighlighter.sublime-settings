{
    "enabled": true,
    "style": "default",
    "icons": true,
    "ha_style": "default",
    "ha_icons": false,
    "default_keybindings": true,
    "convert_util_path" : "convert",
    "file_exts": [".css", ".sass", ".scss", ".less", ".styl", ".html", ".js", ".sublime-settings", ".tmTheme", ".stTheme", ".erb", ".haml", ".back", ".py", ".md", ".qss"],
    "channels": {
        "empty": "",
        "hex2": "[0-9a-fA-F]{2}",
        "hex1": "[0-9a-fA-F]",
        "dec": "\\d{1,3}",
        "float": "(?:[0|1])|(?:[1][\\.]?[0]*)|(?:[0]?[\\.]\\d*)",
        "perc": "\\d{1,3}[%]",
        "hue": "dec",
        "saturation": "perc",
        "value": "perc",
        "lightness": "perc"
    },
    "formats": {
        "@named": {
            "description": "Named css colors"
        },
        "@varless": {
            "description": "Less variables: @a-b-c"
        },
        "@varsass": {
            "description": "Sass variables: $a-b-c"
        },
        "@varstyl": {
            "description": "Styl variables: a-b-c"
        },
        "@varstyldollar": {
            "description": "Styl variables: $a-b-c"
        },
        "sharp8": {
            "description": "Hex #RRGGBBAA color format",
            "regex": "(?<!&)#(?P<R>hex2)(?P<G>hex2)(?P<B>hex2)(?P<A>hex2)\\b(?!\\w)",
            "white": "#FFFFFFFF",
            "disable_exts": [".py"]
        },
        "sharp6": {
            "description": "Hex #RRGGBB color format",
            "regex": "(?<!&)#(?P<R>hex2)(?P<G>hex2)(?P<B>hex2)\\b(?!\\w)",
            "white": "#FFFFFF",
            "after": "sharp8",
            "disable_exts": ".py"
        },
        "sharp4": {
            "description": "Hex #RGBA color format",
            "regex": "(?<!&)#(?P<R>hex1)(?P<G>hex1)(?P<B>hex1)(?P<A>hex1)\\b(?!\\w)",
            "white": "#FFFF",
            "after": "sharp6"
        },
        "sharp3": {
            "description": "Hex #RGB color format",
            "regex": "(?<!&)#(?P<R>hex1)(?P<G>hex1)(?P<B>hex1)\\b(?!\\w)",
            "white": "#FFF",
            "after": "sharp4"
        },
        "hex8": {
            "description": "Hex 0xRRGGBBAA color format",
            "regex": "0x(?P<R>hex2)(?P<G>hex2)(?P<B>hex2)(?P<A>hex2)\\b",
            "white": "0xFFFFFFFF"
        },
        "hex6": {
            "description": "Hex 0xRRGGBB color format",
            "regex": "0x(?P<R>hex2)(?P<G>hex2)(?P<B>hex2)\\b",
            "white": "0xFFFFFF",
            "after": "hex8"
        },
        "hex4": {
            "description": "Hex 0xRGBA color format",
            "regex": "0x(?P<R>hex1)(?P<G>hex1)(?P<B>hex1)(?P<A>hex1)\\b",
            "white": "0xFFFF",
            "after": "hex6"
        },
        "hex3": {
            "description": "Hex 0xRGB color format",
            "regex": "0x(?P<R>hex1)(?P<G>hex1)(?P<B>hex1)\\b",
            "white": "0xFFF",
            "after": "hex4"
        },
        "rgba": {
            "description": "rgba(255,255,255,1) color format",
            "regex": "rgba[(][ ]*(?P<R>dec)[ ]*[,][ ]*(?P<G>dec)[ ]*[,][ ]*(?P<B>dec)[ ]*[,][ ]*(?P<A>float)[ ]*[)]",
            "white": "rgba(255, 255, 255, 1)"
        },
        "rgb": {
            "description": "rgb(255,255,255) color format",
            "regex": "rgb[(][ ]*(?P<R>dec)[ ]*[,][ ]*(?P<G>dec)[ ]*[,][ ]*(?P<B>dec)[ ]*[)]",
            "white": "rgb(255, 255, 255)"
        },
        "rgba_array": {
            "description": "[r, g, b, a] color format, where each channel can be int(0..255) or float(0. .. 1.) or percentage (0..100)%. For example: [255, 100%, 1., 255]",
            "regex": "[\\[][ ]*(?P<R>dec|perc|float)[ ]*[,][ ]*(?P<G>dec|perc|float)[ ]*[,][ ]*(?P<B>dec|perc|float)[ ]*[,][ ]*(?P<A>dec|perc|float)[ ]*[\\]]",
            "white": "[255, 255, 255, 255]"
        },
        "rgb_array": {
            "description": "[r, g, b] color format, where each channel can be int(0..255) or float(0. .. 1.) or percentage (0..100)%. For example: [255, 100%, 1., 255]",
            "regex": "[\\[][ ]*(?P<R>dec|perc|float)[ ]*[,][ ]*(?P<G>dec|perc|float)[ ]*[,][ ]*(?P<B>dec|perc|float)[ ]*[\\]]",
            "white": "[255, 255, 255]"
        },
        "hsva": {
            "description": "hsva(hue 0..255, s%, v%, alpha 0.0 .. 1.0) color format",
            "regex": "hsva[(][ ]*(?P<R>hue)[ ]*[,][ ]*(?P<G>saturation)[ ]*[,][ ]*(?P<B>value)[ ]*[,][ ]*(?P<A>float)[ ]*[)]",
            "white": "hsva(0, 0%, 100%, 1.)"
        },
        "hsv": {
            "description": "hsv(hue 0..255, s%, v%) color format",
            "regex": "hsv[(][ ]*(?P<R>hue)[ ]*[,][ ]*(?P<G>saturation)[ ]*[,][ ]*(?P<B>value)[ ]*[)]",
            "white": "hsv(0, 0%, 100%)"
        },
        "hsla": {
            "description": "hsla(hue 0..255, s%, v%, alpha 0.0 .. 1.0) color format",
            "regex": "hsla[(][ ]*(?P<R>hue)[ ]*[,][ ]*(?P<G>saturation)[ ]*[,][ ]*(?P<B>lightness)[ ]*[,][ ]*(?P<A>float)[ ]*[)]",
            "white": "hsla(0, 0%, 100%, 1.)"
        },
        "hsl": {
            "description": "hsl(hue 0..255, s%, v%) color format",
            "regex": "hsl[(][ ]*(?P<R>hue)[ ]*[,][ ]*(?P<G>saturation)[ ]*[,][ ]*(?P<B>lightness)[ ]*[)]",
            "white": "hsl(0, 0%, 100%)"
        }
    }
}
